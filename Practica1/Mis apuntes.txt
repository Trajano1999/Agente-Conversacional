														-----------------------------
														|	APUNTES DE IA	|
														|	PRACTICA 1		|
														-----------------------------

Comienzo del programa:
	<?xml version="1.0" encoding="UTF-8"?>
	<aiml version=“2.0">
		algo
	</aiml>

Vamos trabajar en fichero .aiml.
	-aiml: carpeta donde se incluyen los archivos con extensión aiml.
	-aimlif: carpeta donde se creará la nueva información aprendida por el “bot”. En este caso, la extensión de los ficheros es .csv
	-config: carpeta que contiene la información del “bot”
	-data: carpeta donde se almacena información temporal del intérprete.
	(En nuestro caso, esta carpeta será ignorada).
	-sets: carpeta donde se almacenan los “set” que va a usar el intérprete.
	maps: carpeta donde se almacenan los “map” que usará el intérprete.

El procesamiento de lectura de un mensaje consiste en:
	1) Eliminar los signos de puntuación.
	2) Transformación a mayúsculas de todo.
	3) Extiende las contracciones.

Esto implica que en el pattern no debemos poner signos de puntuación.
¡¡ No admite ni tildes ni ñ !!

Ante la duda, coge el de mayor prioridad
	Hola # > Hola _ > Hola amigo > Hola ^ > Hola *
Por encima de esto está el $ que es el máximo pero NO es un comodín, solo un marcador.

Para referirnos a comodines usamos las reglas: 
	<star/> si solo hay un comodín.
	<star index="2"/> si hay más de un comodín.

														     -----------------
															VARIABLES
															----------------
Hay 3 tipos:
	1)Propiedades del BOT: Define la información que quiere proporcionar el Bot sobre si mismo y sólo puede ser asignadas por el BotMaster (el creador del Bot).
	2)Var Globales o Predicados: En realidad son variables globales. Dentro de AIML una variable es global cuando su valor puede ser consultado o modificado fuera de una regla (categoría).
	3)Var Locales: Como su nombre indica son variables cuyo ámbito es local a una regla (categoría) y su valor no puede ser consultado fuera de dicha regla.

																(1)
Se puede añadir nuevas variables siguiendo el siguiente formato en la carpeta program-ab/bots/mybots/config/
<nombre variable>:<valor>

Para acceder a las propiedades del BOT la sintaxis a usar es la siguiente:
	<bot name=“x”/>	donde x es la propiedad deseada, por ej, x podría valer "age".
	
																(2)
La sintaxis es: 
	<set name=“x”>value</set>	donde x es el nombre de la variable.
Para acceder a ese valor, usaremos:
	<get name=“x”/>	donde x es el nombre de la variable.

Las variables globales tienen sentido cuando el valor va a ser usado en varias reglas. Si no es así, las variables que deben usarse son las locales.

																(3)
La sintaxis es: 
	<set var=“x”>value</set>	donde x es el nombre de la variable.
Para acceder a ese valor, usaremos:
	<get var=“x”/>	donde x es el nombre de la variable.

El ámbito de las variables locales es el template de la regla en la que esté.

Además, para evitar el eco que se produce al almacenar una variable podemos hacer:
	<think></think>		justo después del template.
														
													-----------------------------------
													REDUCCION SIMBOLICA
													-----------------------------------
Permiten:
	• Simplificar las entradas usando pocas palabras
	• Enlazar distintas entradas sinónimas con un mismo template
	• Corregir errores ortográficos por parte del usuario
	• Reemplazar expresiones coloquiales por expresiones formales
	• Eliminar palabras innecesarias en las entradas

El patrón asociado es: <srai>...</srai>

														-------------------
														SETS Y MAPS
														-------------------

Un set es una lista de cadenas que se expresa sobre un fichero. El nombre del fichero da la denominación del set y la extensión debe ser “txt”. Este fichero debe estar ubicado en la carpeta “sets”.

La secuencia <set>color</set> en el patrón, verifica si la entrada coincide con alguna de las palabras que aparecen en el fichero “color.txt”. Si es así, la regla se dispara. En otro caso, será la segunda regla la que se dispare. ¡¡Por tanto importa el orden!!

	# > _ > SET > ^ > * 

Maps representa el tipo de dato diccionario y al igual que los sets se codifica en un fichero independiente donde el nombre del fichero da nombre al maps y la extensión a de ser “txt”. El formato es cadena1:cadena2

La operación <map name=“capital”>KEY</map> devuelve el valor asociado a la clave KEY.

AIML tiene implícitamente definidos los siguientes sets y maps:
	• <set>number</set>				Números naturales
	• <map name=“successor”>		Dado un número natural “n” devuelve “n+1”
	• <map name=“predecessor”>		Dado un número natural “n” devuelve “n-1”
	• <map name=“plural”>				Devuelve el plurar de un palabra en singular (sólo Inglés)
	• <map name=“singular”>			Devuelve el singular de un palabra en plural (sólo Inglés)

														-----------------
														CONTEXTO
														-----------------

En AIML hay 3 elementos para recordar el contexto:
	• Los predicados o variables globales (vistas previamente)
	• El tag <that>
		El bot recuerda la última respuesta. En base a esa respuesta puede alterar la respuesta a la siguiente pregunta. 
		El tag <that> se sitúa entre <pattern> y <template>.
	• Un “set” predefinido en el lenguaje llamado “topic”
		Esta variable global predefinida en el lenguaje permite agrupar las reglas de manera que estas 
		sólo se activan cuando la conversación se centra en un tema concreto. Por ejemplo:
		
		<topic name=“cafe”>
		<category> ..... </category>
		..........................
		<category> ..... </category>
		</topic>

		<template> te gusta el <set name=“topic”> cafe </set></template>

													---------------------
													ESTRUCTURAS
													---------------------
Existe una estructura  que usa ramdom:
	<random>
	<li> .... </li>
	<li> ... </li>
	......
	<li> ... <li>
	</random>

Otra estrcutura que es muy similar al switch de C:
	<condition var =“x”>
	<li value=“x1”> .... </li>
	<li value=“x2”> ... </li>
	......
	<li> ... <li>
	</condition>
En realidad podemos cambiar "var" por "name" si es variable global

Existen los ciclos del tipo “mientras condición hacer un bloque de operaciones” y eso implica el uso implícito de la operación de
condición.

